
Before beginning, please note that NGS++ does not officially support the Windows 7 plateform. The following has worked on several tests machines, but we cannot guarantee its ease of use. The openMP suport may also be spotty if you compile the library as such.

This install will work on a 64 bit Windows 7 installation. If you are using a 32 bit installation, it may fail during the linking phase, due to problems with boost and MingW interaction.

****

This walkthrough details the steps needed to build the NGS++ library on a 64 bit Windows 7 platform. It includes the following:

- Installing a gcc comptatible toolchain (TDM)
- Installing MSYS.
- Building the library.
- Manually building and linking a test program via command line.
- Manually build and linking a test program via CodeBlocks.


1) Download and install TDM-GCC

- Download TDM from it's website ( http://tdm-gcc.tdragon.net/ ). Make sure to download the MingW64 bundle installer ( tdm64-gcc-4.7.1-3 )

- Install using the downloaded file.
	IMPORTANT : Select MinGW-w64/TDM64 Experimental (32-bit and 64-bit)
	IMPORTANT : Change the default path to something other then c:\Mingw64
	IMPORTANT : Make sure to install with all components to include openMp support. (Select the type of install: TDM-GCC Recommended, All Packages)

2) Install MSYS

- Download the latest installer from http://sourceforge.net/projects/mingw/files/Installer/mingw-get-inst/ in .exe format.
- Install with default values except for the Select Component part where you must select MinGW Developper ToolKit (you can also unselect the MinGW Compiler Suite if you wish to save space).
- Add C:\MinGW\msys\1.0\bin to the PATH in the System Variables.
(http://geekswithblogs.net/renso/archive/2009/10/21/how-to-set-the-windows-path-in-windows-7.aspx offers a good guide on changing the path on Windows 7 system).

3) Building the library

- Open the mingW command prompt from the application menu. This will automatically set the needed PATH parameters to use the TDM toolchain.
- Navigate to the NGS directory
- Type "make" to execute the Makefile

The library should build and link. The library will be present in the ..\libs sub-directory

4) Building a test sample

- Navigate to the sample-src directory (NGSplusplus\NGS\sample-src).
- Type "make"
- The compiled tools are located in the "bin" directory. 

5) Configuring and building via Codeblocks

- Install Codeblocks ( http://www.codeblocks.org/ )  12.11. As we will be using TDM, download the version without mingW
- Start Codeblocks. Ignore warnings of no compilers detected if any found.
- Set the Codeblocks compiler. 
	- Go into the Settings - Compiler menu
	- In Global compiler settings - Toolchain Executables, set the Compiler installation directory to be the same you specified when installing TDM-GCC
	- Specify each part of the toolchain to link to the appropriate one in the /bin directory
	
	C compiler = gcc.exe
	C++ compiler = g++.exe
	Linker for dynamic = g++.exe
	Linker for static = ar.exe
	Ressource compiler = windres.exe
	Make = mingw32-make.exe

Make sure to select ok to save your settings. Test by compiling a "hello world" program that does not use NGS++

---------------- Setting up a project in CodeBlocks to use NGS++ --------------------------

Once the compiler is set up, the following will need to be done once for each project.

- Assuming the library is built. LIBDIR is the directory where libgNGS.a is, INCLUDIR is the directory where the NGS++.h file is found.

1) Make a new Codeblocks project (Empty Project)

2) Right-click on the projet in the management pane ( left-side ) and select Project Build options

3) In the Compiler Settings - Compiler Flags tab, make sure the "Have g++ follow the c++11 ISO.. " is set. We also recommend enable -pedantic  and -Wall

4) Go into the Search directories tab and in the Compiler sub-tab, add INCLUDIR and INCLUDIR/NGS/boost-include directories.
	Example: If the library was downloaded to c:\lib, we would add c:\lib and c:\lib\NGS\boost-include to the search directories

5) Go into the Linker settings tab. Then in the other linker options section, add the following

-Wl,-whole-archive LIBDIR\libNGS.a -Wl,-no-whole-archive

	Example: If the library was downloaded and built in c:\lib, the path would look something like this
	-Wl,-whole-archive c:\lib\NGS\libs\libNGS.a -Wl,-no-whole-archive


Step 4) told the compiler where to find the library headers. The boost-include is necessary to avoid conflicting with a local boost installation
Step 5) Links the library

Voila! Make sure to #include "NGS++.h" to start using the library. You should now be able to use the library. 

